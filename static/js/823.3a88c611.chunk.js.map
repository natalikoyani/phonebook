{"version":3,"file":"static/js/823.3a88c611.chunk.js","mappings":"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","sources":["redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.styled.js","components/ContactList/ContactList.jsx","components/Loader.jsx","components/Filter/Filter.styled.js","components/Filter/Filter.jsx","pages/Contacts/Contacts.styled.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\n\nexport const selectFilter = state => state.filter;\n\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectError = state => state.contacts.error;","// import { Formik } from 'formik';\n// import * as Yup from 'yup';\n// import {\n//   StyledForm,\n//   StyledLabel,\n//   StyledButton,\n//   StyledField,\n//   StyledErrorMessage,\n// } from './ContactForm.styled';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { addContact } from '../../redux/contacts/operations';\n// import { selectContacts } from 'redux/contacts/selectors';\n\n// const phonebookSchema = Yup.object().shape({\n//   name: Yup.string().required('This field is required!'),\n//   number: Yup.string()\n//     .matches(/^[0-9-+]+$/, 'Please enter digits, \"-\" or \"+\"')\n//     .required('This field is required!'),\n// });\n\n// export const ContactForm = () => {\n//   const dispatch = useDispatch();\n//   const contacts = useSelector(selectContacts);\n\n//   return (\n//     <Formik\n//       initialValues={{ name: '', number: '' }}\n//       validationSchema={phonebookSchema}\n//       onSubmit={(values, actions) => {\n//         if (\n//           contacts.some(\n//             contact => contact.name.toLowerCase() === values.name.toLowerCase()\n//           )\n//         ) {\n//           return alert(`${values.name} is already in contacts!`);\n//         }\n//         dispatch(addContact(values));\n//         actions.resetForm();\n//       }}\n//     >\n//       <StyledForm>\n//         <StyledLabel>\n//           Name\n//           <StyledField name=\"name\" />\n//           <StyledErrorMessage name=\"name\" component=\"div\" />\n//         </StyledLabel>\n//         <StyledLabel>\n//           Number\n//           <StyledField name=\"number\" />\n//           <StyledErrorMessage name=\"number\" component=\"div\" />\n//         </StyledLabel>\n//         <StyledButton type=\"submit\">Add contact</StyledButton>\n//       </StyledForm>\n//     </Formik>\n//   );\n// };\n\nimport { Formik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Button,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  VStack,\n} from '@chakra-ui/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectContacts } from 'redux/contacts/selectors';\n\nconst phonebookSchema = Yup.object().shape({\n  name: Yup.string().required('This field is required!'),\n  number: Yup.string()\n    .matches(/^[0-9-+]+$/, 'Please enter digits, \"-\" or \"+\"')\n    .required('This field is required!'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  return (\n    <Formik\n      initialValues={{ name: '', number: '' }}\n      validationSchema={phonebookSchema}\n      onSubmit={(values, actions) => {\n        if (\n          contacts.some(\n            contact => contact.name.toLowerCase() === values.name.toLowerCase()\n          )\n        ) {\n          return alert(`${values.name} is already in contacts!`);\n        }\n        dispatch(addContact(values));\n        actions.resetForm();\n      }}\n    >\n      {({ handleSubmit, errors, touched }) => (\n        <form onSubmit={handleSubmit}>\n          <VStack spacing={4} align=\"flex-start\">\n            <FormControl isInvalid={!!errors.name && touched.name}>\n              <FormLabel htmlFor=\"name\">Name</FormLabel>\n              <Field\n                as={Input}\n                id=\"name\"\n                name=\"name\"\n                type=\"text\"\n                width=\"20em\"\n              />\n              <FormErrorMessage>{errors.name}</FormErrorMessage>\n            </FormControl>\n            <FormControl isInvalid={!!errors.number && touched.number}>\n              <FormLabel htmlFor=\"number\">Number</FormLabel>\n              <Field\n                as={Input}\n                id=\"number\"\n                name=\"number\"\n                type=\"text\"\n                width=\"20em\"\n              />\n              <FormErrorMessage>{errors.number}</FormErrorMessage>\n            </FormControl>\n            <Button type=\"submit\" colorScheme=\"purple\">\n              Add contact\n            </Button>\n          </VStack>\n        </form>\n      )}\n    </Formik>\n  );\n};\n\n","import styled from 'styled-components';\n\nexport const StyledList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  row-gap: 15px;\n  list-style: none;\n`;","import { nanoid } from 'nanoid';\nimport { StyledList } from './ContactList.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { selectContacts, selectFilter } from 'redux/contacts/selectors';\nimport { Btn } from 'components/Button';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(selectFilter);\n\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n\n  return (\n    <StyledList>\n      {filteredContacts.map(contact => {\n        return (\n          <li key={nanoid()}>\n            {contact.name}: {contact.number}{' '}\n            <Btn\n              type=\"button\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </Btn>\n          </li>\n        );\n      })}\n    </StyledList>\n  );\n};\n","import { BallTriangle } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <div\n      style={{\n        position: 'absolute',\n        top: '50%',\n        left: '50%',\n        transform: 'translate(-50%, -50%)',\n      }}\n    >\n      <BallTriangle\n        height={100}\n        width={100}\n        radius={5}\n        color=\"#31cfff\"\n        ariaLabel=\"ball-triangle-loading\"\n        wrapperClass={{}}\n        wrapperStyle=\"\"\n        visible={true}\n      />\n    </div>\n  );\n};","import styled from 'styled-components';\n\nexport const StyledTitle = styled.p`\n  margin-bottom: 5px;\n`;","import { StyledTitle } from './Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { onFilterChange } from '../../redux/filterSlice';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { Input } from '@chakra-ui/react';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  if (contacts.length === 0 ?? !contacts) {\n    return (\n      <>\n        <StyledTitle>There are no contacts yet!</StyledTitle>\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <StyledTitle>Find contacts by name</StyledTitle>\n      <Input\n        type=\"string\"\n        name=\"filter\"\n        width=\"20em\"\n        onChange={e => dispatch(onFilterChange(e.target.value))}\n      />\n    </div>\n  );\n};\n","import styled from 'styled-components';\n\nexport const ContactsPageWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 15px;\n  margin-top: 15px;\n`;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { selectIsLoading } from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactsPageWrapper } from './Contacts.styled';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ContactsPageWrapper>\n      <Helmet>\n        <title>Your contacts</title>\n      </Helmet>\n      <ContactForm />\n      <Filter />\n      <div>{isLoading && <Loader />}</div>\n      <ContactList />\n    </ContactsPageWrapper>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectIsLoading","isLoading","phonebookSchema","Yup","shape","name","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","_jsx","Formik","initialValues","validationSchema","onSubmit","values","actions","some","contact","toLowerCase","alert","concat","addContact","resetForm","children","_ref","handleSubmit","errors","touched","_jsxs","VStack","spacing","align","FormControl","isInvalid","FormLabel","htmlFor","Field","as","Input","id","type","width","FormErrorMessage","Button","colorScheme","StyledList","styled","_templateObject","_taggedTemplateLiteral","ContactList","filteredContacts","includes","map","Btn","onClick","deleteContact","nanoid","Loader","style","position","top","left","transform","BallTriangle","height","radius","color","ariaLabel","wrapperClass","wrapperStyle","visible","StyledTitle","Filter","length","_Fragment","onChange","e","onFilterChange","target","value","ContactsPageWrapper","Contacts","useEffect","fetchContacts","Helmet"],"sourceRoot":""}